// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eu {
namespace point {
namespace tmsdn {
namespace impl {

namespace {

const ::google::protobuf::Descriptor* TmSdnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmSdnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmSdnMessage_LinkStatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmSdnMessage_LinkStatusMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TmSdnMessage_LinkStatusMessage_LSMType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TmSdnMessage_TrafficMonitoringMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmSdnMessage_TrafficMonitoringMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmSdnMessage_ResourceRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceRequestMessage_RecourceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmSdnMessage_ResourceRequestMessage_RecourceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceOfferMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmSdnMessage_ResourceOfferMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceOfferMessage_RecourceOffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmSdnMessage_ResourceOfferMessage_RecourceOffer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TmSdnMessage_TmSdnMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  TmSdnMessage_descriptor_ = file->message_type(0);
  static const int TmSdnMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage, linkstatusmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage, trafficmonitoringmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage, resourcerequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage, resourceoffermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage, type_),
  };
  TmSdnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmSdnMessage_descriptor_,
      TmSdnMessage::default_instance_,
      TmSdnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmSdnMessage));
  TmSdnMessage_LinkStatusMessage_descriptor_ = TmSdnMessage_descriptor_->nested_type(0);
  static const int TmSdnMessage_LinkStatusMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_LinkStatusMessage, lsmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_LinkStatusMessage, nodeid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_LinkStatusMessage, nodeid2_),
  };
  TmSdnMessage_LinkStatusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmSdnMessage_LinkStatusMessage_descriptor_,
      TmSdnMessage_LinkStatusMessage::default_instance_,
      TmSdnMessage_LinkStatusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_LinkStatusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_LinkStatusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmSdnMessage_LinkStatusMessage));
  TmSdnMessage_LinkStatusMessage_LSMType_descriptor_ = TmSdnMessage_LinkStatusMessage_descriptor_->enum_type(0);
  TmSdnMessage_TrafficMonitoringMessage_descriptor_ = TmSdnMessage_descriptor_->nested_type(1);
  static const int TmSdnMessage_TrafficMonitoringMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, nodeid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, nodeid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, packetsreceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, packetstransmitted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, bytesreceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, bytestransmitted_),
  };
  TmSdnMessage_TrafficMonitoringMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmSdnMessage_TrafficMonitoringMessage_descriptor_,
      TmSdnMessage_TrafficMonitoringMessage::default_instance_,
      TmSdnMessage_TrafficMonitoringMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_TrafficMonitoringMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmSdnMessage_TrafficMonitoringMessage));
  TmSdnMessage_ResourceRequestMessage_descriptor_ = TmSdnMessage_descriptor_->nested_type(2);
  static const int TmSdnMessage_ResourceRequestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage, requests_),
  };
  TmSdnMessage_ResourceRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmSdnMessage_ResourceRequestMessage_descriptor_,
      TmSdnMessage_ResourceRequestMessage::default_instance_,
      TmSdnMessage_ResourceRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmSdnMessage_ResourceRequestMessage));
  TmSdnMessage_ResourceRequestMessage_RecourceRequest_descriptor_ = TmSdnMessage_ResourceRequestMessage_descriptor_->nested_type(0);
  static const int TmSdnMessage_ResourceRequestMessage_RecourceRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage_RecourceRequest, srcnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage_RecourceRequest, dstnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage_RecourceRequest, srcmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage_RecourceRequest, nodeconnector_),
  };
  TmSdnMessage_ResourceRequestMessage_RecourceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmSdnMessage_ResourceRequestMessage_RecourceRequest_descriptor_,
      TmSdnMessage_ResourceRequestMessage_RecourceRequest::default_instance_,
      TmSdnMessage_ResourceRequestMessage_RecourceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage_RecourceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceRequestMessage_RecourceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmSdnMessage_ResourceRequestMessage_RecourceRequest));
  TmSdnMessage_ResourceOfferMessage_descriptor_ = TmSdnMessage_descriptor_->nested_type(3);
  static const int TmSdnMessage_ResourceOfferMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage, offers_),
  };
  TmSdnMessage_ResourceOfferMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmSdnMessage_ResourceOfferMessage_descriptor_,
      TmSdnMessage_ResourceOfferMessage::default_instance_,
      TmSdnMessage_ResourceOfferMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmSdnMessage_ResourceOfferMessage));
  TmSdnMessage_ResourceOfferMessage_RecourceOffer_descriptor_ = TmSdnMessage_ResourceOfferMessage_descriptor_->nested_type(0);
  static const int TmSdnMessage_ResourceOfferMessage_RecourceOffer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage_RecourceOffer, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage_RecourceOffer, lid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage_RecourceOffer, ilid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage_RecourceOffer, srcmac_),
  };
  TmSdnMessage_ResourceOfferMessage_RecourceOffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmSdnMessage_ResourceOfferMessage_RecourceOffer_descriptor_,
      TmSdnMessage_ResourceOfferMessage_RecourceOffer::default_instance_,
      TmSdnMessage_ResourceOfferMessage_RecourceOffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage_RecourceOffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmSdnMessage_ResourceOfferMessage_RecourceOffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmSdnMessage_ResourceOfferMessage_RecourceOffer));
  TmSdnMessage_TmSdnMessageType_descriptor_ = TmSdnMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmSdnMessage_descriptor_, &TmSdnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmSdnMessage_LinkStatusMessage_descriptor_, &TmSdnMessage_LinkStatusMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmSdnMessage_TrafficMonitoringMessage_descriptor_, &TmSdnMessage_TrafficMonitoringMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmSdnMessage_ResourceRequestMessage_descriptor_, &TmSdnMessage_ResourceRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmSdnMessage_ResourceRequestMessage_RecourceRequest_descriptor_, &TmSdnMessage_ResourceRequestMessage_RecourceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmSdnMessage_ResourceOfferMessage_descriptor_, &TmSdnMessage_ResourceOfferMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmSdnMessage_ResourceOfferMessage_RecourceOffer_descriptor_, &TmSdnMessage_ResourceOfferMessage_RecourceOffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete TmSdnMessage::default_instance_;
  delete TmSdnMessage_reflection_;
  delete TmSdnMessage_LinkStatusMessage::default_instance_;
  delete TmSdnMessage_LinkStatusMessage_reflection_;
  delete TmSdnMessage_TrafficMonitoringMessage::default_instance_;
  delete TmSdnMessage_TrafficMonitoringMessage_reflection_;
  delete TmSdnMessage_ResourceRequestMessage::default_instance_;
  delete TmSdnMessage_ResourceRequestMessage_reflection_;
  delete TmSdnMessage_ResourceRequestMessage_RecourceRequest::default_instance_;
  delete TmSdnMessage_ResourceRequestMessage_RecourceRequest_reflection_;
  delete TmSdnMessage_ResourceOfferMessage::default_instance_;
  delete TmSdnMessage_ResourceOfferMessage_reflection_;
  delete TmSdnMessage_ResourceOfferMessage_RecourceOffer::default_instance_;
  delete TmSdnMessage_ResourceOfferMessage_RecourceOffer_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\023eu.point.tmsdn.impl\"\265\t"
    "\n\014TmSdnMessage\022N\n\021linkStatusMessage\030\001 \001("
    "\01323.eu.point.tmsdn.impl.TmSdnMessage.Lin"
    "kStatusMessage\022\\\n\030trafficMonitoringMessa"
    "ge\030\002 \001(\0132:.eu.point.tmsdn.impl.TmSdnMess"
    "age.TrafficMonitoringMessage\022X\n\026resource"
    "RequestMessage\030\003 \001(\01328.eu.point.tmsdn.im"
    "pl.TmSdnMessage.ResourceRequestMessage\022T"
    "\n\024resourceOfferMessage\030\004 \001(\01326.eu.point."
    "tmsdn.impl.TmSdnMessage.ResourceOfferMes"
    "sage\022@\n\004type\030\005 \002(\01622.eu.point.tmsdn.impl"
    ".TmSdnMessage.TmSdnMessageType\032\240\001\n\021LinkS"
    "tatusMessage\022L\n\007lsmType\030\001 \002(\0162;.eu.point"
    ".tmsdn.impl.TmSdnMessage.LinkStatusMessa"
    "ge.LSMType\022\017\n\007nodeID1\030\002 \002(\t\022\017\n\007nodeID2\030\003"
    " \002(\t\"\033\n\007LSMType\022\007\n\003ADD\020\000\022\007\n\003RMV\020\001\032\242\001\n\030Tr"
    "afficMonitoringMessage\022\017\n\007nodeID1\030\001 \002(\t\022"
    "\017\n\007nodeID2\030\002 \002(\t\022\027\n\017packetsReceived\030\003 \002("
    "\003\022\032\n\022packetsTransmitted\030\004 \002(\003\022\025\n\rbytesRe"
    "ceived\030\005 \002(\003\022\030\n\020bytesTransmitted\030\006 \002(\003\032\320"
    "\001\n\026ResourceRequestMessage\022Z\n\010requests\030\001 "
    "\003(\0132H.eu.point.tmsdn.impl.TmSdnMessage.R"
    "esourceRequestMessage.RecourceRequest\032Z\n"
    "\017RecourceRequest\022\017\n\007srcNode\030\001 \002(\t\022\017\n\007dst"
    "Node\030\002 \002(\t\022\016\n\006srcMac\030\003 \001(\t\022\025\n\rnodeConnec"
    "tor\030\004 \001(\t\032\265\001\n\024ResourceOfferMessage\022T\n\006of"
    "fers\030\001 \003(\0132D.eu.point.tmsdn.impl.TmSdnMe"
    "ssage.ResourceOfferMessage.RecourceOffer"
    "\032G\n\rRecourceOffer\022\013\n\003nid\030\001 \002(\t\022\013\n\003lid\030\002 "
    "\002(\t\022\014\n\004ilid\030\003 \002(\t\022\016\n\006srcMac\030\004 \001(\t\"2\n\020TmS"
    "dnMessageType\022\006\n\002LS\020\000\022\006\n\002TM\020\001\022\006\n\002RR\020\002\022\006\n"
    "\002RO\020\003B$\n\023eu.point.tmsdn.implB\rTmSdnMessa"
    "ges", 1283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  TmSdnMessage::default_instance_ = new TmSdnMessage();
  TmSdnMessage_LinkStatusMessage::default_instance_ = new TmSdnMessage_LinkStatusMessage();
  TmSdnMessage_TrafficMonitoringMessage::default_instance_ = new TmSdnMessage_TrafficMonitoringMessage();
  TmSdnMessage_ResourceRequestMessage::default_instance_ = new TmSdnMessage_ResourceRequestMessage();
  TmSdnMessage_ResourceRequestMessage_RecourceRequest::default_instance_ = new TmSdnMessage_ResourceRequestMessage_RecourceRequest();
  TmSdnMessage_ResourceOfferMessage::default_instance_ = new TmSdnMessage_ResourceOfferMessage();
  TmSdnMessage_ResourceOfferMessage_RecourceOffer::default_instance_ = new TmSdnMessage_ResourceOfferMessage_RecourceOffer();
  TmSdnMessage::default_instance_->InitAsDefaultInstance();
  TmSdnMessage_LinkStatusMessage::default_instance_->InitAsDefaultInstance();
  TmSdnMessage_TrafficMonitoringMessage::default_instance_->InitAsDefaultInstance();
  TmSdnMessage_ResourceRequestMessage::default_instance_->InitAsDefaultInstance();
  TmSdnMessage_ResourceRequestMessage_RecourceRequest::default_instance_->InitAsDefaultInstance();
  TmSdnMessage_ResourceOfferMessage::default_instance_->InitAsDefaultInstance();
  TmSdnMessage_ResourceOfferMessage_RecourceOffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TmSdnMessage_TmSdnMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_TmSdnMessageType_descriptor_;
}
bool TmSdnMessage_TmSdnMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TmSdnMessage_TmSdnMessageType TmSdnMessage::LS;
const TmSdnMessage_TmSdnMessageType TmSdnMessage::TM;
const TmSdnMessage_TmSdnMessageType TmSdnMessage::RR;
const TmSdnMessage_TmSdnMessageType TmSdnMessage::RO;
const TmSdnMessage_TmSdnMessageType TmSdnMessage::TmSdnMessageType_MIN;
const TmSdnMessage_TmSdnMessageType TmSdnMessage::TmSdnMessageType_MAX;
const int TmSdnMessage::TmSdnMessageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TmSdnMessage_LinkStatusMessage_LSMType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_LinkStatusMessage_LSMType_descriptor_;
}
bool TmSdnMessage_LinkStatusMessage_LSMType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TmSdnMessage_LinkStatusMessage_LSMType TmSdnMessage_LinkStatusMessage::ADD;
const TmSdnMessage_LinkStatusMessage_LSMType TmSdnMessage_LinkStatusMessage::RMV;
const TmSdnMessage_LinkStatusMessage_LSMType TmSdnMessage_LinkStatusMessage::LSMType_MIN;
const TmSdnMessage_LinkStatusMessage_LSMType TmSdnMessage_LinkStatusMessage::LSMType_MAX;
const int TmSdnMessage_LinkStatusMessage::LSMType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TmSdnMessage_LinkStatusMessage::kLsmTypeFieldNumber;
const int TmSdnMessage_LinkStatusMessage::kNodeID1FieldNumber;
const int TmSdnMessage_LinkStatusMessage::kNodeID2FieldNumber;
#endif  // !_MSC_VER

TmSdnMessage_LinkStatusMessage::TmSdnMessage_LinkStatusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmSdnMessage_LinkStatusMessage::InitAsDefaultInstance() {
}

TmSdnMessage_LinkStatusMessage::TmSdnMessage_LinkStatusMessage(const TmSdnMessage_LinkStatusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmSdnMessage_LinkStatusMessage::SharedCtor() {
  _cached_size_ = 0;
  lsmtype_ = 0;
  nodeid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodeid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmSdnMessage_LinkStatusMessage::~TmSdnMessage_LinkStatusMessage() {
  SharedDtor();
}

void TmSdnMessage_LinkStatusMessage::SharedDtor() {
  if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid1_;
  }
  if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid2_;
  }
  if (this != default_instance_) {
  }
}

void TmSdnMessage_LinkStatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmSdnMessage_LinkStatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_LinkStatusMessage_descriptor_;
}

const TmSdnMessage_LinkStatusMessage& TmSdnMessage_LinkStatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TmSdnMessage_LinkStatusMessage* TmSdnMessage_LinkStatusMessage::default_instance_ = NULL;

TmSdnMessage_LinkStatusMessage* TmSdnMessage_LinkStatusMessage::New() const {
  return new TmSdnMessage_LinkStatusMessage;
}

void TmSdnMessage_LinkStatusMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lsmtype_ = 0;
    if (has_nodeid1()) {
      if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
        nodeid1_->clear();
      }
    }
    if (has_nodeid2()) {
      if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
        nodeid2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmSdnMessage_LinkStatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage.LSMType lsmType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType_IsValid(value)) {
            set_lsmtype(static_cast< ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeID1;
        break;
      }

      // required string nodeID1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeID1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid1().data(), this->nodeid1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodeID2;
        break;
      }

      // required string nodeID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid2().data(), this->nodeid2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmSdnMessage_LinkStatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage.LSMType lsmType = 1;
  if (has_lsmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lsmtype(), output);
  }

  // required string nodeID1 = 2;
  if (has_nodeid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid1().data(), this->nodeid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodeid1(), output);
  }

  // required string nodeID2 = 3;
  if (has_nodeid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid2().data(), this->nodeid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nodeid2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmSdnMessage_LinkStatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage.LSMType lsmType = 1;
  if (has_lsmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lsmtype(), target);
  }

  // required string nodeID1 = 2;
  if (has_nodeid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid1().data(), this->nodeid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodeid1(), target);
  }

  // required string nodeID2 = 3;
  if (has_nodeid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid2().data(), this->nodeid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nodeid2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmSdnMessage_LinkStatusMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage.LSMType lsmType = 1;
    if (has_lsmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lsmtype());
    }

    // required string nodeID1 = 2;
    if (has_nodeid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid1());
    }

    // required string nodeID2 = 3;
    if (has_nodeid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmSdnMessage_LinkStatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmSdnMessage_LinkStatusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmSdnMessage_LinkStatusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmSdnMessage_LinkStatusMessage::MergeFrom(const TmSdnMessage_LinkStatusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lsmtype()) {
      set_lsmtype(from.lsmtype());
    }
    if (from.has_nodeid1()) {
      set_nodeid1(from.nodeid1());
    }
    if (from.has_nodeid2()) {
      set_nodeid2(from.nodeid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmSdnMessage_LinkStatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmSdnMessage_LinkStatusMessage::CopyFrom(const TmSdnMessage_LinkStatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmSdnMessage_LinkStatusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TmSdnMessage_LinkStatusMessage::Swap(TmSdnMessage_LinkStatusMessage* other) {
  if (other != this) {
    std::swap(lsmtype_, other->lsmtype_);
    std::swap(nodeid1_, other->nodeid1_);
    std::swap(nodeid2_, other->nodeid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmSdnMessage_LinkStatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmSdnMessage_LinkStatusMessage_descriptor_;
  metadata.reflection = TmSdnMessage_LinkStatusMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TmSdnMessage_TrafficMonitoringMessage::kNodeID1FieldNumber;
const int TmSdnMessage_TrafficMonitoringMessage::kNodeID2FieldNumber;
const int TmSdnMessage_TrafficMonitoringMessage::kPacketsReceivedFieldNumber;
const int TmSdnMessage_TrafficMonitoringMessage::kPacketsTransmittedFieldNumber;
const int TmSdnMessage_TrafficMonitoringMessage::kBytesReceivedFieldNumber;
const int TmSdnMessage_TrafficMonitoringMessage::kBytesTransmittedFieldNumber;
#endif  // !_MSC_VER

TmSdnMessage_TrafficMonitoringMessage::TmSdnMessage_TrafficMonitoringMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmSdnMessage_TrafficMonitoringMessage::InitAsDefaultInstance() {
}

TmSdnMessage_TrafficMonitoringMessage::TmSdnMessage_TrafficMonitoringMessage(const TmSdnMessage_TrafficMonitoringMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmSdnMessage_TrafficMonitoringMessage::SharedCtor() {
  _cached_size_ = 0;
  nodeid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodeid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packetsreceived_ = GOOGLE_LONGLONG(0);
  packetstransmitted_ = GOOGLE_LONGLONG(0);
  bytesreceived_ = GOOGLE_LONGLONG(0);
  bytestransmitted_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmSdnMessage_TrafficMonitoringMessage::~TmSdnMessage_TrafficMonitoringMessage() {
  SharedDtor();
}

void TmSdnMessage_TrafficMonitoringMessage::SharedDtor() {
  if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid1_;
  }
  if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid2_;
  }
  if (this != default_instance_) {
  }
}

void TmSdnMessage_TrafficMonitoringMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmSdnMessage_TrafficMonitoringMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_TrafficMonitoringMessage_descriptor_;
}

const TmSdnMessage_TrafficMonitoringMessage& TmSdnMessage_TrafficMonitoringMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TmSdnMessage_TrafficMonitoringMessage* TmSdnMessage_TrafficMonitoringMessage::default_instance_ = NULL;

TmSdnMessage_TrafficMonitoringMessage* TmSdnMessage_TrafficMonitoringMessage::New() const {
  return new TmSdnMessage_TrafficMonitoringMessage;
}

void TmSdnMessage_TrafficMonitoringMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodeid1()) {
      if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
        nodeid1_->clear();
      }
    }
    if (has_nodeid2()) {
      if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
        nodeid2_->clear();
      }
    }
    packetsreceived_ = GOOGLE_LONGLONG(0);
    packetstransmitted_ = GOOGLE_LONGLONG(0);
    bytesreceived_ = GOOGLE_LONGLONG(0);
    bytestransmitted_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmSdnMessage_TrafficMonitoringMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nodeID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid1().data(), this->nodeid1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeID2;
        break;
      }

      // required string nodeID2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid2().data(), this->nodeid2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_packetsReceived;
        break;
      }

      // required int64 packetsReceived = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packetsReceived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packetsreceived_)));
          set_has_packetsreceived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_packetsTransmitted;
        break;
      }

      // required int64 packetsTransmitted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packetsTransmitted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packetstransmitted_)));
          set_has_packetstransmitted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bytesReceived;
        break;
      }

      // required int64 bytesReceived = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytesReceived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytesreceived_)));
          set_has_bytesreceived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bytesTransmitted;
        break;
      }

      // required int64 bytesTransmitted = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytesTransmitted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytestransmitted_)));
          set_has_bytestransmitted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmSdnMessage_TrafficMonitoringMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nodeID1 = 1;
  if (has_nodeid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid1().data(), this->nodeid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nodeid1(), output);
  }

  // required string nodeID2 = 2;
  if (has_nodeid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid2().data(), this->nodeid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodeid2(), output);
  }

  // required int64 packetsReceived = 3;
  if (has_packetsreceived()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->packetsreceived(), output);
  }

  // required int64 packetsTransmitted = 4;
  if (has_packetstransmitted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->packetstransmitted(), output);
  }

  // required int64 bytesReceived = 5;
  if (has_bytesreceived()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bytesreceived(), output);
  }

  // required int64 bytesTransmitted = 6;
  if (has_bytestransmitted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->bytestransmitted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmSdnMessage_TrafficMonitoringMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nodeID1 = 1;
  if (has_nodeid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid1().data(), this->nodeid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid1(), target);
  }

  // required string nodeID2 = 2;
  if (has_nodeid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid2().data(), this->nodeid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodeid2(), target);
  }

  // required int64 packetsReceived = 3;
  if (has_packetsreceived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->packetsreceived(), target);
  }

  // required int64 packetsTransmitted = 4;
  if (has_packetstransmitted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->packetstransmitted(), target);
  }

  // required int64 bytesReceived = 5;
  if (has_bytesreceived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bytesreceived(), target);
  }

  // required int64 bytesTransmitted = 6;
  if (has_bytestransmitted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->bytestransmitted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmSdnMessage_TrafficMonitoringMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nodeID1 = 1;
    if (has_nodeid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid1());
    }

    // required string nodeID2 = 2;
    if (has_nodeid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid2());
    }

    // required int64 packetsReceived = 3;
    if (has_packetsreceived()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packetsreceived());
    }

    // required int64 packetsTransmitted = 4;
    if (has_packetstransmitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packetstransmitted());
    }

    // required int64 bytesReceived = 5;
    if (has_bytesreceived()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytesreceived());
    }

    // required int64 bytesTransmitted = 6;
    if (has_bytestransmitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytestransmitted());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmSdnMessage_TrafficMonitoringMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmSdnMessage_TrafficMonitoringMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmSdnMessage_TrafficMonitoringMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmSdnMessage_TrafficMonitoringMessage::MergeFrom(const TmSdnMessage_TrafficMonitoringMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid1()) {
      set_nodeid1(from.nodeid1());
    }
    if (from.has_nodeid2()) {
      set_nodeid2(from.nodeid2());
    }
    if (from.has_packetsreceived()) {
      set_packetsreceived(from.packetsreceived());
    }
    if (from.has_packetstransmitted()) {
      set_packetstransmitted(from.packetstransmitted());
    }
    if (from.has_bytesreceived()) {
      set_bytesreceived(from.bytesreceived());
    }
    if (from.has_bytestransmitted()) {
      set_bytestransmitted(from.bytestransmitted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmSdnMessage_TrafficMonitoringMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmSdnMessage_TrafficMonitoringMessage::CopyFrom(const TmSdnMessage_TrafficMonitoringMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmSdnMessage_TrafficMonitoringMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TmSdnMessage_TrafficMonitoringMessage::Swap(TmSdnMessage_TrafficMonitoringMessage* other) {
  if (other != this) {
    std::swap(nodeid1_, other->nodeid1_);
    std::swap(nodeid2_, other->nodeid2_);
    std::swap(packetsreceived_, other->packetsreceived_);
    std::swap(packetstransmitted_, other->packetstransmitted_);
    std::swap(bytesreceived_, other->bytesreceived_);
    std::swap(bytestransmitted_, other->bytestransmitted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmSdnMessage_TrafficMonitoringMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmSdnMessage_TrafficMonitoringMessage_descriptor_;
  metadata.reflection = TmSdnMessage_TrafficMonitoringMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TmSdnMessage_ResourceRequestMessage_RecourceRequest::kSrcNodeFieldNumber;
const int TmSdnMessage_ResourceRequestMessage_RecourceRequest::kDstNodeFieldNumber;
const int TmSdnMessage_ResourceRequestMessage_RecourceRequest::kSrcMacFieldNumber;
const int TmSdnMessage_ResourceRequestMessage_RecourceRequest::kNodeConnectorFieldNumber;
#endif  // !_MSC_VER

TmSdnMessage_ResourceRequestMessage_RecourceRequest::TmSdnMessage_ResourceRequestMessage_RecourceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::InitAsDefaultInstance() {
}

TmSdnMessage_ResourceRequestMessage_RecourceRequest::TmSdnMessage_ResourceRequestMessage_RecourceRequest(const TmSdnMessage_ResourceRequestMessage_RecourceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::SharedCtor() {
  _cached_size_ = 0;
  srcnode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dstnode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodeconnector_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmSdnMessage_ResourceRequestMessage_RecourceRequest::~TmSdnMessage_ResourceRequestMessage_RecourceRequest() {
  SharedDtor();
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::SharedDtor() {
  if (srcnode_ != &::google::protobuf::internal::kEmptyString) {
    delete srcnode_;
  }
  if (dstnode_ != &::google::protobuf::internal::kEmptyString) {
    delete dstnode_;
  }
  if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
    delete srcmac_;
  }
  if (nodeconnector_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeconnector_;
  }
  if (this != default_instance_) {
  }
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceRequestMessage_RecourceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_ResourceRequestMessage_RecourceRequest_descriptor_;
}

const TmSdnMessage_ResourceRequestMessage_RecourceRequest& TmSdnMessage_ResourceRequestMessage_RecourceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TmSdnMessage_ResourceRequestMessage_RecourceRequest* TmSdnMessage_ResourceRequestMessage_RecourceRequest::default_instance_ = NULL;

TmSdnMessage_ResourceRequestMessage_RecourceRequest* TmSdnMessage_ResourceRequestMessage_RecourceRequest::New() const {
  return new TmSdnMessage_ResourceRequestMessage_RecourceRequest;
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_srcnode()) {
      if (srcnode_ != &::google::protobuf::internal::kEmptyString) {
        srcnode_->clear();
      }
    }
    if (has_dstnode()) {
      if (dstnode_ != &::google::protobuf::internal::kEmptyString) {
        dstnode_->clear();
      }
    }
    if (has_srcmac()) {
      if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
        srcmac_->clear();
      }
    }
    if (has_nodeconnector()) {
      if (nodeconnector_ != &::google::protobuf::internal::kEmptyString) {
        nodeconnector_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmSdnMessage_ResourceRequestMessage_RecourceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string srcNode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcnode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcnode().data(), this->srcnode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dstNode;
        break;
      }

      // required string dstNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstnode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dstnode().data(), this->dstnode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srcMac;
        break;
      }

      // optional string srcMac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcMac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcmac().data(), this->srcmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nodeConnector;
        break;
      }

      // optional string nodeConnector = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeConnector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeconnector()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeconnector().data(), this->nodeconnector().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string srcNode = 1;
  if (has_srcnode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcnode().data(), this->srcnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->srcnode(), output);
  }

  // required string dstNode = 2;
  if (has_dstnode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstnode().data(), this->dstnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dstnode(), output);
  }

  // optional string srcMac = 3;
  if (has_srcmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcmac().data(), this->srcmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srcmac(), output);
  }

  // optional string nodeConnector = 4;
  if (has_nodeconnector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeconnector().data(), this->nodeconnector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nodeconnector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmSdnMessage_ResourceRequestMessage_RecourceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string srcNode = 1;
  if (has_srcnode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcnode().data(), this->srcnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->srcnode(), target);
  }

  // required string dstNode = 2;
  if (has_dstnode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstnode().data(), this->dstnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dstnode(), target);
  }

  // optional string srcMac = 3;
  if (has_srcmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcmac().data(), this->srcmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srcmac(), target);
  }

  // optional string nodeConnector = 4;
  if (has_nodeconnector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeconnector().data(), this->nodeconnector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nodeconnector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmSdnMessage_ResourceRequestMessage_RecourceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string srcNode = 1;
    if (has_srcnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcnode());
    }

    // required string dstNode = 2;
    if (has_dstnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dstnode());
    }

    // optional string srcMac = 3;
    if (has_srcmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcmac());
    }

    // optional string nodeConnector = 4;
    if (has_nodeconnector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeconnector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmSdnMessage_ResourceRequestMessage_RecourceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmSdnMessage_ResourceRequestMessage_RecourceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::MergeFrom(const TmSdnMessage_ResourceRequestMessage_RecourceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcnode()) {
      set_srcnode(from.srcnode());
    }
    if (from.has_dstnode()) {
      set_dstnode(from.dstnode());
    }
    if (from.has_srcmac()) {
      set_srcmac(from.srcmac());
    }
    if (from.has_nodeconnector()) {
      set_nodeconnector(from.nodeconnector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::CopyFrom(const TmSdnMessage_ResourceRequestMessage_RecourceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmSdnMessage_ResourceRequestMessage_RecourceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TmSdnMessage_ResourceRequestMessage_RecourceRequest::Swap(TmSdnMessage_ResourceRequestMessage_RecourceRequest* other) {
  if (other != this) {
    std::swap(srcnode_, other->srcnode_);
    std::swap(dstnode_, other->dstnode_);
    std::swap(srcmac_, other->srcmac_);
    std::swap(nodeconnector_, other->nodeconnector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmSdnMessage_ResourceRequestMessage_RecourceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmSdnMessage_ResourceRequestMessage_RecourceRequest_descriptor_;
  metadata.reflection = TmSdnMessage_ResourceRequestMessage_RecourceRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TmSdnMessage_ResourceRequestMessage::kRequestsFieldNumber;
#endif  // !_MSC_VER

TmSdnMessage_ResourceRequestMessage::TmSdnMessage_ResourceRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmSdnMessage_ResourceRequestMessage::InitAsDefaultInstance() {
}

TmSdnMessage_ResourceRequestMessage::TmSdnMessage_ResourceRequestMessage(const TmSdnMessage_ResourceRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmSdnMessage_ResourceRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmSdnMessage_ResourceRequestMessage::~TmSdnMessage_ResourceRequestMessage() {
  SharedDtor();
}

void TmSdnMessage_ResourceRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TmSdnMessage_ResourceRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_ResourceRequestMessage_descriptor_;
}

const TmSdnMessage_ResourceRequestMessage& TmSdnMessage_ResourceRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TmSdnMessage_ResourceRequestMessage* TmSdnMessage_ResourceRequestMessage::default_instance_ = NULL;

TmSdnMessage_ResourceRequestMessage* TmSdnMessage_ResourceRequestMessage::New() const {
  return new TmSdnMessage_ResourceRequestMessage;
}

void TmSdnMessage_ResourceRequestMessage::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmSdnMessage_ResourceRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage.RecourceRequest requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmSdnMessage_ResourceRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage.RecourceRequest requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmSdnMessage_ResourceRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage.RecourceRequest requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmSdnMessage_ResourceRequestMessage::ByteSize() const {
  int total_size = 0;

  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage.RecourceRequest requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmSdnMessage_ResourceRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmSdnMessage_ResourceRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmSdnMessage_ResourceRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmSdnMessage_ResourceRequestMessage::MergeFrom(const TmSdnMessage_ResourceRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmSdnMessage_ResourceRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmSdnMessage_ResourceRequestMessage::CopyFrom(const TmSdnMessage_ResourceRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmSdnMessage_ResourceRequestMessage::IsInitialized() const {

  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void TmSdnMessage_ResourceRequestMessage::Swap(TmSdnMessage_ResourceRequestMessage* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmSdnMessage_ResourceRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmSdnMessage_ResourceRequestMessage_descriptor_;
  metadata.reflection = TmSdnMessage_ResourceRequestMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TmSdnMessage_ResourceOfferMessage_RecourceOffer::kNidFieldNumber;
const int TmSdnMessage_ResourceOfferMessage_RecourceOffer::kLidFieldNumber;
const int TmSdnMessage_ResourceOfferMessage_RecourceOffer::kIlidFieldNumber;
const int TmSdnMessage_ResourceOfferMessage_RecourceOffer::kSrcMacFieldNumber;
#endif  // !_MSC_VER

TmSdnMessage_ResourceOfferMessage_RecourceOffer::TmSdnMessage_ResourceOfferMessage_RecourceOffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::InitAsDefaultInstance() {
}

TmSdnMessage_ResourceOfferMessage_RecourceOffer::TmSdnMessage_ResourceOfferMessage_RecourceOffer(const TmSdnMessage_ResourceOfferMessage_RecourceOffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::SharedCtor() {
  _cached_size_ = 0;
  nid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ilid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmSdnMessage_ResourceOfferMessage_RecourceOffer::~TmSdnMessage_ResourceOfferMessage_RecourceOffer() {
  SharedDtor();
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::SharedDtor() {
  if (nid_ != &::google::protobuf::internal::kEmptyString) {
    delete nid_;
  }
  if (lid_ != &::google::protobuf::internal::kEmptyString) {
    delete lid_;
  }
  if (ilid_ != &::google::protobuf::internal::kEmptyString) {
    delete ilid_;
  }
  if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
    delete srcmac_;
  }
  if (this != default_instance_) {
  }
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceOfferMessage_RecourceOffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_ResourceOfferMessage_RecourceOffer_descriptor_;
}

const TmSdnMessage_ResourceOfferMessage_RecourceOffer& TmSdnMessage_ResourceOfferMessage_RecourceOffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TmSdnMessage_ResourceOfferMessage_RecourceOffer* TmSdnMessage_ResourceOfferMessage_RecourceOffer::default_instance_ = NULL;

TmSdnMessage_ResourceOfferMessage_RecourceOffer* TmSdnMessage_ResourceOfferMessage_RecourceOffer::New() const {
  return new TmSdnMessage_ResourceOfferMessage_RecourceOffer;
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nid()) {
      if (nid_ != &::google::protobuf::internal::kEmptyString) {
        nid_->clear();
      }
    }
    if (has_lid()) {
      if (lid_ != &::google::protobuf::internal::kEmptyString) {
        lid_->clear();
      }
    }
    if (has_ilid()) {
      if (ilid_ != &::google::protobuf::internal::kEmptyString) {
        ilid_->clear();
      }
    }
    if (has_srcmac()) {
      if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
        srcmac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmSdnMessage_ResourceOfferMessage_RecourceOffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nid().data(), this->nid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lid;
        break;
      }

      // required string lid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lid().data(), this->lid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ilid;
        break;
      }

      // required string ilid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ilid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ilid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ilid().data(), this->ilid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_srcMac;
        break;
      }

      // optional string srcMac = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcMac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcmac().data(), this->srcmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nid = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nid().data(), this->nid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nid(), output);
  }

  // required string lid = 2;
  if (has_lid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lid().data(), this->lid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lid(), output);
  }

  // required string ilid = 3;
  if (has_ilid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ilid().data(), this->ilid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ilid(), output);
  }

  // optional string srcMac = 4;
  if (has_srcmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcmac().data(), this->srcmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->srcmac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmSdnMessage_ResourceOfferMessage_RecourceOffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nid = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nid().data(), this->nid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nid(), target);
  }

  // required string lid = 2;
  if (has_lid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lid().data(), this->lid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lid(), target);
  }

  // required string ilid = 3;
  if (has_ilid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ilid().data(), this->ilid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ilid(), target);
  }

  // optional string srcMac = 4;
  if (has_srcmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcmac().data(), this->srcmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->srcmac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmSdnMessage_ResourceOfferMessage_RecourceOffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nid = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nid());
    }

    // required string lid = 2;
    if (has_lid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lid());
    }

    // required string ilid = 3;
    if (has_ilid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ilid());
    }

    // optional string srcMac = 4;
    if (has_srcmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcmac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmSdnMessage_ResourceOfferMessage_RecourceOffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmSdnMessage_ResourceOfferMessage_RecourceOffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::MergeFrom(const TmSdnMessage_ResourceOfferMessage_RecourceOffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_lid()) {
      set_lid(from.lid());
    }
    if (from.has_ilid()) {
      set_ilid(from.ilid());
    }
    if (from.has_srcmac()) {
      set_srcmac(from.srcmac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::CopyFrom(const TmSdnMessage_ResourceOfferMessage_RecourceOffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmSdnMessage_ResourceOfferMessage_RecourceOffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TmSdnMessage_ResourceOfferMessage_RecourceOffer::Swap(TmSdnMessage_ResourceOfferMessage_RecourceOffer* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(lid_, other->lid_);
    std::swap(ilid_, other->ilid_);
    std::swap(srcmac_, other->srcmac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmSdnMessage_ResourceOfferMessage_RecourceOffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmSdnMessage_ResourceOfferMessage_RecourceOffer_descriptor_;
  metadata.reflection = TmSdnMessage_ResourceOfferMessage_RecourceOffer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TmSdnMessage_ResourceOfferMessage::kOffersFieldNumber;
#endif  // !_MSC_VER

TmSdnMessage_ResourceOfferMessage::TmSdnMessage_ResourceOfferMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmSdnMessage_ResourceOfferMessage::InitAsDefaultInstance() {
}

TmSdnMessage_ResourceOfferMessage::TmSdnMessage_ResourceOfferMessage(const TmSdnMessage_ResourceOfferMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmSdnMessage_ResourceOfferMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmSdnMessage_ResourceOfferMessage::~TmSdnMessage_ResourceOfferMessage() {
  SharedDtor();
}

void TmSdnMessage_ResourceOfferMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TmSdnMessage_ResourceOfferMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmSdnMessage_ResourceOfferMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_ResourceOfferMessage_descriptor_;
}

const TmSdnMessage_ResourceOfferMessage& TmSdnMessage_ResourceOfferMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TmSdnMessage_ResourceOfferMessage* TmSdnMessage_ResourceOfferMessage::default_instance_ = NULL;

TmSdnMessage_ResourceOfferMessage* TmSdnMessage_ResourceOfferMessage::New() const {
  return new TmSdnMessage_ResourceOfferMessage;
}

void TmSdnMessage_ResourceOfferMessage::Clear() {
  offers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmSdnMessage_ResourceOfferMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage.RecourceOffer offers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_offers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmSdnMessage_ResourceOfferMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage.RecourceOffer offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmSdnMessage_ResourceOfferMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage.RecourceOffer offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmSdnMessage_ResourceOfferMessage::ByteSize() const {
  int total_size = 0;

  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage.RecourceOffer offers = 1;
  total_size += 1 * this->offers_size();
  for (int i = 0; i < this->offers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmSdnMessage_ResourceOfferMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmSdnMessage_ResourceOfferMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmSdnMessage_ResourceOfferMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmSdnMessage_ResourceOfferMessage::MergeFrom(const TmSdnMessage_ResourceOfferMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  offers_.MergeFrom(from.offers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmSdnMessage_ResourceOfferMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmSdnMessage_ResourceOfferMessage::CopyFrom(const TmSdnMessage_ResourceOfferMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmSdnMessage_ResourceOfferMessage::IsInitialized() const {

  for (int i = 0; i < offers_size(); i++) {
    if (!this->offers(i).IsInitialized()) return false;
  }
  return true;
}

void TmSdnMessage_ResourceOfferMessage::Swap(TmSdnMessage_ResourceOfferMessage* other) {
  if (other != this) {
    offers_.Swap(&other->offers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmSdnMessage_ResourceOfferMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmSdnMessage_ResourceOfferMessage_descriptor_;
  metadata.reflection = TmSdnMessage_ResourceOfferMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TmSdnMessage::kLinkStatusMessageFieldNumber;
const int TmSdnMessage::kTrafficMonitoringMessageFieldNumber;
const int TmSdnMessage::kResourceRequestMessageFieldNumber;
const int TmSdnMessage::kResourceOfferMessageFieldNumber;
const int TmSdnMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

TmSdnMessage::TmSdnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmSdnMessage::InitAsDefaultInstance() {
  linkstatusmessage_ = const_cast< ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage*>(&::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage::default_instance());
  trafficmonitoringmessage_ = const_cast< ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage*>(&::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage::default_instance());
  resourcerequestmessage_ = const_cast< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage*>(&::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage::default_instance());
  resourceoffermessage_ = const_cast< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage*>(&::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage::default_instance());
}

TmSdnMessage::TmSdnMessage(const TmSdnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmSdnMessage::SharedCtor() {
  _cached_size_ = 0;
  linkstatusmessage_ = NULL;
  trafficmonitoringmessage_ = NULL;
  resourcerequestmessage_ = NULL;
  resourceoffermessage_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmSdnMessage::~TmSdnMessage() {
  SharedDtor();
}

void TmSdnMessage::SharedDtor() {
  if (this != default_instance_) {
    delete linkstatusmessage_;
    delete trafficmonitoringmessage_;
    delete resourcerequestmessage_;
    delete resourceoffermessage_;
  }
}

void TmSdnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmSdnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmSdnMessage_descriptor_;
}

const TmSdnMessage& TmSdnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TmSdnMessage* TmSdnMessage::default_instance_ = NULL;

TmSdnMessage* TmSdnMessage::New() const {
  return new TmSdnMessage;
}

void TmSdnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_linkstatusmessage()) {
      if (linkstatusmessage_ != NULL) linkstatusmessage_->::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage::Clear();
    }
    if (has_trafficmonitoringmessage()) {
      if (trafficmonitoringmessage_ != NULL) trafficmonitoringmessage_->::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage::Clear();
    }
    if (has_resourcerequestmessage()) {
      if (resourcerequestmessage_ != NULL) resourcerequestmessage_->::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage::Clear();
    }
    if (has_resourceoffermessage()) {
      if (resourceoffermessage_ != NULL) resourceoffermessage_->::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmSdnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage linkStatusMessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkstatusmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trafficMonitoringMessage;
        break;
      }

      // optional .eu.point.tmsdn.impl.TmSdnMessage.TrafficMonitoringMessage trafficMonitoringMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trafficMonitoringMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trafficmonitoringmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resourceRequestMessage;
        break;
      }

      // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage resourceRequestMessage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourcerequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resourceOfferMessage;
        break;
      }

      // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage resourceOfferMessage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceOfferMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourceoffermessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .eu.point.tmsdn.impl.TmSdnMessage.TmSdnMessageType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType_IsValid(value)) {
            set_type(static_cast< ::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmSdnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage linkStatusMessage = 1;
  if (has_linkstatusmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linkstatusmessage(), output);
  }

  // optional .eu.point.tmsdn.impl.TmSdnMessage.TrafficMonitoringMessage trafficMonitoringMessage = 2;
  if (has_trafficmonitoringmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trafficmonitoringmessage(), output);
  }

  // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage resourceRequestMessage = 3;
  if (has_resourcerequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resourcerequestmessage(), output);
  }

  // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage resourceOfferMessage = 4;
  if (has_resourceoffermessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resourceoffermessage(), output);
  }

  // required .eu.point.tmsdn.impl.TmSdnMessage.TmSdnMessageType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmSdnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage linkStatusMessage = 1;
  if (has_linkstatusmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linkstatusmessage(), target);
  }

  // optional .eu.point.tmsdn.impl.TmSdnMessage.TrafficMonitoringMessage trafficMonitoringMessage = 2;
  if (has_trafficmonitoringmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trafficmonitoringmessage(), target);
  }

  // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage resourceRequestMessage = 3;
  if (has_resourcerequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resourcerequestmessage(), target);
  }

  // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage resourceOfferMessage = 4;
  if (has_resourceoffermessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resourceoffermessage(), target);
  }

  // required .eu.point.tmsdn.impl.TmSdnMessage.TmSdnMessageType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmSdnMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage linkStatusMessage = 1;
    if (has_linkstatusmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linkstatusmessage());
    }

    // optional .eu.point.tmsdn.impl.TmSdnMessage.TrafficMonitoringMessage trafficMonitoringMessage = 2;
    if (has_trafficmonitoringmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trafficmonitoringmessage());
    }

    // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage resourceRequestMessage = 3;
    if (has_resourcerequestmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourcerequestmessage());
    }

    // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage resourceOfferMessage = 4;
    if (has_resourceoffermessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourceoffermessage());
    }

    // required .eu.point.tmsdn.impl.TmSdnMessage.TmSdnMessageType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmSdnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmSdnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmSdnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmSdnMessage::MergeFrom(const TmSdnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linkstatusmessage()) {
      mutable_linkstatusmessage()->::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage::MergeFrom(from.linkstatusmessage());
    }
    if (from.has_trafficmonitoringmessage()) {
      mutable_trafficmonitoringmessage()->::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage::MergeFrom(from.trafficmonitoringmessage());
    }
    if (from.has_resourcerequestmessage()) {
      mutable_resourcerequestmessage()->::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage::MergeFrom(from.resourcerequestmessage());
    }
    if (from.has_resourceoffermessage()) {
      mutable_resourceoffermessage()->::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage::MergeFrom(from.resourceoffermessage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmSdnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmSdnMessage::CopyFrom(const TmSdnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmSdnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_linkstatusmessage()) {
    if (!this->linkstatusmessage().IsInitialized()) return false;
  }
  if (has_trafficmonitoringmessage()) {
    if (!this->trafficmonitoringmessage().IsInitialized()) return false;
  }
  if (has_resourcerequestmessage()) {
    if (!this->resourcerequestmessage().IsInitialized()) return false;
  }
  if (has_resourceoffermessage()) {
    if (!this->resourceoffermessage().IsInitialized()) return false;
  }
  return true;
}

void TmSdnMessage::Swap(TmSdnMessage* other) {
  if (other != this) {
    std::swap(linkstatusmessage_, other->linkstatusmessage_);
    std::swap(trafficmonitoringmessage_, other->trafficmonitoringmessage_);
    std::swap(resourcerequestmessage_, other->resourcerequestmessage_);
    std::swap(resourceoffermessage_, other->resourceoffermessage_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmSdnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmSdnMessage_descriptor_;
  metadata.reflection = TmSdnMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace impl
}  // namespace tmsdn
}  // namespace point
}  // namespace eu

// @@protoc_insertion_point(global_scope)
