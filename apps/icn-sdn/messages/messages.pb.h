// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace eu {
namespace point {
namespace tmsdn {
namespace impl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class TmSdnMessage;
class TmSdnMessage_LinkStatusMessage;
class TmSdnMessage_TrafficMonitoringMessage;
class TmSdnMessage_ResourceRequestMessage;
class TmSdnMessage_ResourceRequestMessage_RecourceRequest;
class TmSdnMessage_ResourceOfferMessage;
class TmSdnMessage_ResourceOfferMessage_RecourceOffer;

enum TmSdnMessage_LinkStatusMessage_LSMType {
  TmSdnMessage_LinkStatusMessage_LSMType_ADD = 0,
  TmSdnMessage_LinkStatusMessage_LSMType_RMV = 1
};
bool TmSdnMessage_LinkStatusMessage_LSMType_IsValid(int value);
const TmSdnMessage_LinkStatusMessage_LSMType TmSdnMessage_LinkStatusMessage_LSMType_LSMType_MIN = TmSdnMessage_LinkStatusMessage_LSMType_ADD;
const TmSdnMessage_LinkStatusMessage_LSMType TmSdnMessage_LinkStatusMessage_LSMType_LSMType_MAX = TmSdnMessage_LinkStatusMessage_LSMType_RMV;
const int TmSdnMessage_LinkStatusMessage_LSMType_LSMType_ARRAYSIZE = TmSdnMessage_LinkStatusMessage_LSMType_LSMType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TmSdnMessage_LinkStatusMessage_LSMType_descriptor();
inline const ::std::string& TmSdnMessage_LinkStatusMessage_LSMType_Name(TmSdnMessage_LinkStatusMessage_LSMType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TmSdnMessage_LinkStatusMessage_LSMType_descriptor(), value);
}
inline bool TmSdnMessage_LinkStatusMessage_LSMType_Parse(
    const ::std::string& name, TmSdnMessage_LinkStatusMessage_LSMType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TmSdnMessage_LinkStatusMessage_LSMType>(
    TmSdnMessage_LinkStatusMessage_LSMType_descriptor(), name, value);
}
enum TmSdnMessage_TmSdnMessageType {
  TmSdnMessage_TmSdnMessageType_LS = 0,
  TmSdnMessage_TmSdnMessageType_TM = 1,
  TmSdnMessage_TmSdnMessageType_RR = 2,
  TmSdnMessage_TmSdnMessageType_RO = 3
};
bool TmSdnMessage_TmSdnMessageType_IsValid(int value);
const TmSdnMessage_TmSdnMessageType TmSdnMessage_TmSdnMessageType_TmSdnMessageType_MIN = TmSdnMessage_TmSdnMessageType_LS;
const TmSdnMessage_TmSdnMessageType TmSdnMessage_TmSdnMessageType_TmSdnMessageType_MAX = TmSdnMessage_TmSdnMessageType_RO;
const int TmSdnMessage_TmSdnMessageType_TmSdnMessageType_ARRAYSIZE = TmSdnMessage_TmSdnMessageType_TmSdnMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TmSdnMessage_TmSdnMessageType_descriptor();
inline const ::std::string& TmSdnMessage_TmSdnMessageType_Name(TmSdnMessage_TmSdnMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TmSdnMessage_TmSdnMessageType_descriptor(), value);
}
inline bool TmSdnMessage_TmSdnMessageType_Parse(
    const ::std::string& name, TmSdnMessage_TmSdnMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TmSdnMessage_TmSdnMessageType>(
    TmSdnMessage_TmSdnMessageType_descriptor(), name, value);
}
// ===================================================================

class TmSdnMessage_LinkStatusMessage : public ::google::protobuf::Message {
 public:
  TmSdnMessage_LinkStatusMessage();
  virtual ~TmSdnMessage_LinkStatusMessage();

  TmSdnMessage_LinkStatusMessage(const TmSdnMessage_LinkStatusMessage& from);

  inline TmSdnMessage_LinkStatusMessage& operator=(const TmSdnMessage_LinkStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmSdnMessage_LinkStatusMessage& default_instance();

  void Swap(TmSdnMessage_LinkStatusMessage* other);

  // implements Message ----------------------------------------------

  TmSdnMessage_LinkStatusMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmSdnMessage_LinkStatusMessage& from);
  void MergeFrom(const TmSdnMessage_LinkStatusMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TmSdnMessage_LinkStatusMessage_LSMType LSMType;
  static const LSMType ADD = TmSdnMessage_LinkStatusMessage_LSMType_ADD;
  static const LSMType RMV = TmSdnMessage_LinkStatusMessage_LSMType_RMV;
  static inline bool LSMType_IsValid(int value) {
    return TmSdnMessage_LinkStatusMessage_LSMType_IsValid(value);
  }
  static const LSMType LSMType_MIN =
    TmSdnMessage_LinkStatusMessage_LSMType_LSMType_MIN;
  static const LSMType LSMType_MAX =
    TmSdnMessage_LinkStatusMessage_LSMType_LSMType_MAX;
  static const int LSMType_ARRAYSIZE =
    TmSdnMessage_LinkStatusMessage_LSMType_LSMType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LSMType_descriptor() {
    return TmSdnMessage_LinkStatusMessage_LSMType_descriptor();
  }
  static inline const ::std::string& LSMType_Name(LSMType value) {
    return TmSdnMessage_LinkStatusMessage_LSMType_Name(value);
  }
  static inline bool LSMType_Parse(const ::std::string& name,
      LSMType* value) {
    return TmSdnMessage_LinkStatusMessage_LSMType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage.LSMType lsmType = 1;
  inline bool has_lsmtype() const;
  inline void clear_lsmtype();
  static const int kLsmTypeFieldNumber = 1;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType lsmtype() const;
  inline void set_lsmtype(::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType value);

  // required string nodeID1 = 2;
  inline bool has_nodeid1() const;
  inline void clear_nodeid1();
  static const int kNodeID1FieldNumber = 2;
  inline const ::std::string& nodeid1() const;
  inline void set_nodeid1(const ::std::string& value);
  inline void set_nodeid1(const char* value);
  inline void set_nodeid1(const char* value, size_t size);
  inline ::std::string* mutable_nodeid1();
  inline ::std::string* release_nodeid1();
  inline void set_allocated_nodeid1(::std::string* nodeid1);

  // required string nodeID2 = 3;
  inline bool has_nodeid2() const;
  inline void clear_nodeid2();
  static const int kNodeID2FieldNumber = 3;
  inline const ::std::string& nodeid2() const;
  inline void set_nodeid2(const ::std::string& value);
  inline void set_nodeid2(const char* value);
  inline void set_nodeid2(const char* value, size_t size);
  inline ::std::string* mutable_nodeid2();
  inline ::std::string* release_nodeid2();
  inline void set_allocated_nodeid2(::std::string* nodeid2);

  // @@protoc_insertion_point(class_scope:eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage)
 private:
  inline void set_has_lsmtype();
  inline void clear_has_lsmtype();
  inline void set_has_nodeid1();
  inline void clear_has_nodeid1();
  inline void set_has_nodeid2();
  inline void clear_has_nodeid2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nodeid1_;
  ::std::string* nodeid2_;
  int lsmtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TmSdnMessage_LinkStatusMessage* default_instance_;
};
// -------------------------------------------------------------------

class TmSdnMessage_TrafficMonitoringMessage : public ::google::protobuf::Message {
 public:
  TmSdnMessage_TrafficMonitoringMessage();
  virtual ~TmSdnMessage_TrafficMonitoringMessage();

  TmSdnMessage_TrafficMonitoringMessage(const TmSdnMessage_TrafficMonitoringMessage& from);

  inline TmSdnMessage_TrafficMonitoringMessage& operator=(const TmSdnMessage_TrafficMonitoringMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmSdnMessage_TrafficMonitoringMessage& default_instance();

  void Swap(TmSdnMessage_TrafficMonitoringMessage* other);

  // implements Message ----------------------------------------------

  TmSdnMessage_TrafficMonitoringMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmSdnMessage_TrafficMonitoringMessage& from);
  void MergeFrom(const TmSdnMessage_TrafficMonitoringMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nodeID1 = 1;
  inline bool has_nodeid1() const;
  inline void clear_nodeid1();
  static const int kNodeID1FieldNumber = 1;
  inline const ::std::string& nodeid1() const;
  inline void set_nodeid1(const ::std::string& value);
  inline void set_nodeid1(const char* value);
  inline void set_nodeid1(const char* value, size_t size);
  inline ::std::string* mutable_nodeid1();
  inline ::std::string* release_nodeid1();
  inline void set_allocated_nodeid1(::std::string* nodeid1);

  // required string nodeID2 = 2;
  inline bool has_nodeid2() const;
  inline void clear_nodeid2();
  static const int kNodeID2FieldNumber = 2;
  inline const ::std::string& nodeid2() const;
  inline void set_nodeid2(const ::std::string& value);
  inline void set_nodeid2(const char* value);
  inline void set_nodeid2(const char* value, size_t size);
  inline ::std::string* mutable_nodeid2();
  inline ::std::string* release_nodeid2();
  inline void set_allocated_nodeid2(::std::string* nodeid2);

  // required int64 packetsReceived = 3;
  inline bool has_packetsreceived() const;
  inline void clear_packetsreceived();
  static const int kPacketsReceivedFieldNumber = 3;
  inline ::google::protobuf::int64 packetsreceived() const;
  inline void set_packetsreceived(::google::protobuf::int64 value);

  // required int64 packetsTransmitted = 4;
  inline bool has_packetstransmitted() const;
  inline void clear_packetstransmitted();
  static const int kPacketsTransmittedFieldNumber = 4;
  inline ::google::protobuf::int64 packetstransmitted() const;
  inline void set_packetstransmitted(::google::protobuf::int64 value);

  // required int64 bytesReceived = 5;
  inline bool has_bytesreceived() const;
  inline void clear_bytesreceived();
  static const int kBytesReceivedFieldNumber = 5;
  inline ::google::protobuf::int64 bytesreceived() const;
  inline void set_bytesreceived(::google::protobuf::int64 value);

  // required int64 bytesTransmitted = 6;
  inline bool has_bytestransmitted() const;
  inline void clear_bytestransmitted();
  static const int kBytesTransmittedFieldNumber = 6;
  inline ::google::protobuf::int64 bytestransmitted() const;
  inline void set_bytestransmitted(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:eu.point.tmsdn.impl.TmSdnMessage.TrafficMonitoringMessage)
 private:
  inline void set_has_nodeid1();
  inline void clear_has_nodeid1();
  inline void set_has_nodeid2();
  inline void clear_has_nodeid2();
  inline void set_has_packetsreceived();
  inline void clear_has_packetsreceived();
  inline void set_has_packetstransmitted();
  inline void clear_has_packetstransmitted();
  inline void set_has_bytesreceived();
  inline void clear_has_bytesreceived();
  inline void set_has_bytestransmitted();
  inline void clear_has_bytestransmitted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nodeid1_;
  ::std::string* nodeid2_;
  ::google::protobuf::int64 packetsreceived_;
  ::google::protobuf::int64 packetstransmitted_;
  ::google::protobuf::int64 bytesreceived_;
  ::google::protobuf::int64 bytestransmitted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TmSdnMessage_TrafficMonitoringMessage* default_instance_;
};
// -------------------------------------------------------------------

class TmSdnMessage_ResourceRequestMessage_RecourceRequest : public ::google::protobuf::Message {
 public:
  TmSdnMessage_ResourceRequestMessage_RecourceRequest();
  virtual ~TmSdnMessage_ResourceRequestMessage_RecourceRequest();

  TmSdnMessage_ResourceRequestMessage_RecourceRequest(const TmSdnMessage_ResourceRequestMessage_RecourceRequest& from);

  inline TmSdnMessage_ResourceRequestMessage_RecourceRequest& operator=(const TmSdnMessage_ResourceRequestMessage_RecourceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmSdnMessage_ResourceRequestMessage_RecourceRequest& default_instance();

  void Swap(TmSdnMessage_ResourceRequestMessage_RecourceRequest* other);

  // implements Message ----------------------------------------------

  TmSdnMessage_ResourceRequestMessage_RecourceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmSdnMessage_ResourceRequestMessage_RecourceRequest& from);
  void MergeFrom(const TmSdnMessage_ResourceRequestMessage_RecourceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string srcNode = 1;
  inline bool has_srcnode() const;
  inline void clear_srcnode();
  static const int kSrcNodeFieldNumber = 1;
  inline const ::std::string& srcnode() const;
  inline void set_srcnode(const ::std::string& value);
  inline void set_srcnode(const char* value);
  inline void set_srcnode(const char* value, size_t size);
  inline ::std::string* mutable_srcnode();
  inline ::std::string* release_srcnode();
  inline void set_allocated_srcnode(::std::string* srcnode);

  // required string dstNode = 2;
  inline bool has_dstnode() const;
  inline void clear_dstnode();
  static const int kDstNodeFieldNumber = 2;
  inline const ::std::string& dstnode() const;
  inline void set_dstnode(const ::std::string& value);
  inline void set_dstnode(const char* value);
  inline void set_dstnode(const char* value, size_t size);
  inline ::std::string* mutable_dstnode();
  inline ::std::string* release_dstnode();
  inline void set_allocated_dstnode(::std::string* dstnode);

  // optional string srcMac = 3;
  inline bool has_srcmac() const;
  inline void clear_srcmac();
  static const int kSrcMacFieldNumber = 3;
  inline const ::std::string& srcmac() const;
  inline void set_srcmac(const ::std::string& value);
  inline void set_srcmac(const char* value);
  inline void set_srcmac(const char* value, size_t size);
  inline ::std::string* mutable_srcmac();
  inline ::std::string* release_srcmac();
  inline void set_allocated_srcmac(::std::string* srcmac);

  // optional string nodeConnector = 4;
  inline bool has_nodeconnector() const;
  inline void clear_nodeconnector();
  static const int kNodeConnectorFieldNumber = 4;
  inline const ::std::string& nodeconnector() const;
  inline void set_nodeconnector(const ::std::string& value);
  inline void set_nodeconnector(const char* value);
  inline void set_nodeconnector(const char* value, size_t size);
  inline ::std::string* mutable_nodeconnector();
  inline ::std::string* release_nodeconnector();
  inline void set_allocated_nodeconnector(::std::string* nodeconnector);

  // @@protoc_insertion_point(class_scope:eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage.RecourceRequest)
 private:
  inline void set_has_srcnode();
  inline void clear_has_srcnode();
  inline void set_has_dstnode();
  inline void clear_has_dstnode();
  inline void set_has_srcmac();
  inline void clear_has_srcmac();
  inline void set_has_nodeconnector();
  inline void clear_has_nodeconnector();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* srcnode_;
  ::std::string* dstnode_;
  ::std::string* srcmac_;
  ::std::string* nodeconnector_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TmSdnMessage_ResourceRequestMessage_RecourceRequest* default_instance_;
};
// -------------------------------------------------------------------

class TmSdnMessage_ResourceRequestMessage : public ::google::protobuf::Message {
 public:
  TmSdnMessage_ResourceRequestMessage();
  virtual ~TmSdnMessage_ResourceRequestMessage();

  TmSdnMessage_ResourceRequestMessage(const TmSdnMessage_ResourceRequestMessage& from);

  inline TmSdnMessage_ResourceRequestMessage& operator=(const TmSdnMessage_ResourceRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmSdnMessage_ResourceRequestMessage& default_instance();

  void Swap(TmSdnMessage_ResourceRequestMessage* other);

  // implements Message ----------------------------------------------

  TmSdnMessage_ResourceRequestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmSdnMessage_ResourceRequestMessage& from);
  void MergeFrom(const TmSdnMessage_ResourceRequestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TmSdnMessage_ResourceRequestMessage_RecourceRequest RecourceRequest;

  // accessors -------------------------------------------------------

  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage.RecourceRequest requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest& requests(int index) const;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest* mutable_requests(int index);
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest >*
      mutable_requests();

  // @@protoc_insertion_point(class_scope:eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest > requests_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TmSdnMessage_ResourceRequestMessage* default_instance_;
};
// -------------------------------------------------------------------

class TmSdnMessage_ResourceOfferMessage_RecourceOffer : public ::google::protobuf::Message {
 public:
  TmSdnMessage_ResourceOfferMessage_RecourceOffer();
  virtual ~TmSdnMessage_ResourceOfferMessage_RecourceOffer();

  TmSdnMessage_ResourceOfferMessage_RecourceOffer(const TmSdnMessage_ResourceOfferMessage_RecourceOffer& from);

  inline TmSdnMessage_ResourceOfferMessage_RecourceOffer& operator=(const TmSdnMessage_ResourceOfferMessage_RecourceOffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmSdnMessage_ResourceOfferMessage_RecourceOffer& default_instance();

  void Swap(TmSdnMessage_ResourceOfferMessage_RecourceOffer* other);

  // implements Message ----------------------------------------------

  TmSdnMessage_ResourceOfferMessage_RecourceOffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmSdnMessage_ResourceOfferMessage_RecourceOffer& from);
  void MergeFrom(const TmSdnMessage_ResourceOfferMessage_RecourceOffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nid = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNidFieldNumber = 1;
  inline const ::std::string& nid() const;
  inline void set_nid(const ::std::string& value);
  inline void set_nid(const char* value);
  inline void set_nid(const char* value, size_t size);
  inline ::std::string* mutable_nid();
  inline ::std::string* release_nid();
  inline void set_allocated_nid(::std::string* nid);

  // required string lid = 2;
  inline bool has_lid() const;
  inline void clear_lid();
  static const int kLidFieldNumber = 2;
  inline const ::std::string& lid() const;
  inline void set_lid(const ::std::string& value);
  inline void set_lid(const char* value);
  inline void set_lid(const char* value, size_t size);
  inline ::std::string* mutable_lid();
  inline ::std::string* release_lid();
  inline void set_allocated_lid(::std::string* lid);

  // required string ilid = 3;
  inline bool has_ilid() const;
  inline void clear_ilid();
  static const int kIlidFieldNumber = 3;
  inline const ::std::string& ilid() const;
  inline void set_ilid(const ::std::string& value);
  inline void set_ilid(const char* value);
  inline void set_ilid(const char* value, size_t size);
  inline ::std::string* mutable_ilid();
  inline ::std::string* release_ilid();
  inline void set_allocated_ilid(::std::string* ilid);

  // optional string srcMac = 4;
  inline bool has_srcmac() const;
  inline void clear_srcmac();
  static const int kSrcMacFieldNumber = 4;
  inline const ::std::string& srcmac() const;
  inline void set_srcmac(const ::std::string& value);
  inline void set_srcmac(const char* value);
  inline void set_srcmac(const char* value, size_t size);
  inline ::std::string* mutable_srcmac();
  inline ::std::string* release_srcmac();
  inline void set_allocated_srcmac(::std::string* srcmac);

  // @@protoc_insertion_point(class_scope:eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage.RecourceOffer)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_lid();
  inline void clear_has_lid();
  inline void set_has_ilid();
  inline void clear_has_ilid();
  inline void set_has_srcmac();
  inline void clear_has_srcmac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nid_;
  ::std::string* lid_;
  ::std::string* ilid_;
  ::std::string* srcmac_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TmSdnMessage_ResourceOfferMessage_RecourceOffer* default_instance_;
};
// -------------------------------------------------------------------

class TmSdnMessage_ResourceOfferMessage : public ::google::protobuf::Message {
 public:
  TmSdnMessage_ResourceOfferMessage();
  virtual ~TmSdnMessage_ResourceOfferMessage();

  TmSdnMessage_ResourceOfferMessage(const TmSdnMessage_ResourceOfferMessage& from);

  inline TmSdnMessage_ResourceOfferMessage& operator=(const TmSdnMessage_ResourceOfferMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmSdnMessage_ResourceOfferMessage& default_instance();

  void Swap(TmSdnMessage_ResourceOfferMessage* other);

  // implements Message ----------------------------------------------

  TmSdnMessage_ResourceOfferMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmSdnMessage_ResourceOfferMessage& from);
  void MergeFrom(const TmSdnMessage_ResourceOfferMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TmSdnMessage_ResourceOfferMessage_RecourceOffer RecourceOffer;

  // accessors -------------------------------------------------------

  // repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage.RecourceOffer offers = 1;
  inline int offers_size() const;
  inline void clear_offers();
  static const int kOffersFieldNumber = 1;
  inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer& offers(int index) const;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer* mutable_offers(int index);
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer* add_offers();
  inline const ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer >&
      offers() const;
  inline ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer >*
      mutable_offers();

  // @@protoc_insertion_point(class_scope:eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer > offers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TmSdnMessage_ResourceOfferMessage* default_instance_;
};
// -------------------------------------------------------------------

class TmSdnMessage : public ::google::protobuf::Message {
 public:
  TmSdnMessage();
  virtual ~TmSdnMessage();

  TmSdnMessage(const TmSdnMessage& from);

  inline TmSdnMessage& operator=(const TmSdnMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TmSdnMessage& default_instance();

  void Swap(TmSdnMessage* other);

  // implements Message ----------------------------------------------

  TmSdnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TmSdnMessage& from);
  void MergeFrom(const TmSdnMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TmSdnMessage_LinkStatusMessage LinkStatusMessage;
  typedef TmSdnMessage_TrafficMonitoringMessage TrafficMonitoringMessage;
  typedef TmSdnMessage_ResourceRequestMessage ResourceRequestMessage;
  typedef TmSdnMessage_ResourceOfferMessage ResourceOfferMessage;

  typedef TmSdnMessage_TmSdnMessageType TmSdnMessageType;
  static const TmSdnMessageType LS = TmSdnMessage_TmSdnMessageType_LS;
  static const TmSdnMessageType TM = TmSdnMessage_TmSdnMessageType_TM;
  static const TmSdnMessageType RR = TmSdnMessage_TmSdnMessageType_RR;
  static const TmSdnMessageType RO = TmSdnMessage_TmSdnMessageType_RO;
  static inline bool TmSdnMessageType_IsValid(int value) {
    return TmSdnMessage_TmSdnMessageType_IsValid(value);
  }
  static const TmSdnMessageType TmSdnMessageType_MIN =
    TmSdnMessage_TmSdnMessageType_TmSdnMessageType_MIN;
  static const TmSdnMessageType TmSdnMessageType_MAX =
    TmSdnMessage_TmSdnMessageType_TmSdnMessageType_MAX;
  static const int TmSdnMessageType_ARRAYSIZE =
    TmSdnMessage_TmSdnMessageType_TmSdnMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TmSdnMessageType_descriptor() {
    return TmSdnMessage_TmSdnMessageType_descriptor();
  }
  static inline const ::std::string& TmSdnMessageType_Name(TmSdnMessageType value) {
    return TmSdnMessage_TmSdnMessageType_Name(value);
  }
  static inline bool TmSdnMessageType_Parse(const ::std::string& name,
      TmSdnMessageType* value) {
    return TmSdnMessage_TmSdnMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage linkStatusMessage = 1;
  inline bool has_linkstatusmessage() const;
  inline void clear_linkstatusmessage();
  static const int kLinkStatusMessageFieldNumber = 1;
  inline const ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage& linkstatusmessage() const;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* mutable_linkstatusmessage();
  inline ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* release_linkstatusmessage();
  inline void set_allocated_linkstatusmessage(::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* linkstatusmessage);

  // optional .eu.point.tmsdn.impl.TmSdnMessage.TrafficMonitoringMessage trafficMonitoringMessage = 2;
  inline bool has_trafficmonitoringmessage() const;
  inline void clear_trafficmonitoringmessage();
  static const int kTrafficMonitoringMessageFieldNumber = 2;
  inline const ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage& trafficmonitoringmessage() const;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* mutable_trafficmonitoringmessage();
  inline ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* release_trafficmonitoringmessage();
  inline void set_allocated_trafficmonitoringmessage(::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* trafficmonitoringmessage);

  // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage resourceRequestMessage = 3;
  inline bool has_resourcerequestmessage() const;
  inline void clear_resourcerequestmessage();
  static const int kResourceRequestMessageFieldNumber = 3;
  inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage& resourcerequestmessage() const;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* mutable_resourcerequestmessage();
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* release_resourcerequestmessage();
  inline void set_allocated_resourcerequestmessage(::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* resourcerequestmessage);

  // optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage resourceOfferMessage = 4;
  inline bool has_resourceoffermessage() const;
  inline void clear_resourceoffermessage();
  static const int kResourceOfferMessageFieldNumber = 4;
  inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage& resourceoffermessage() const;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* mutable_resourceoffermessage();
  inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* release_resourceoffermessage();
  inline void set_allocated_resourceoffermessage(::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* resourceoffermessage);

  // required .eu.point.tmsdn.impl.TmSdnMessage.TmSdnMessageType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType type() const;
  inline void set_type(::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType value);

  // @@protoc_insertion_point(class_scope:eu.point.tmsdn.impl.TmSdnMessage)
 private:
  inline void set_has_linkstatusmessage();
  inline void clear_has_linkstatusmessage();
  inline void set_has_trafficmonitoringmessage();
  inline void clear_has_trafficmonitoringmessage();
  inline void set_has_resourcerequestmessage();
  inline void clear_has_resourcerequestmessage();
  inline void set_has_resourceoffermessage();
  inline void clear_has_resourceoffermessage();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* linkstatusmessage_;
  ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* trafficmonitoringmessage_;
  ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* resourcerequestmessage_;
  ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* resourceoffermessage_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TmSdnMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TmSdnMessage_LinkStatusMessage

// required .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage.LSMType lsmType = 1;
inline bool TmSdnMessage_LinkStatusMessage::has_lsmtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TmSdnMessage_LinkStatusMessage::set_has_lsmtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TmSdnMessage_LinkStatusMessage::clear_has_lsmtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TmSdnMessage_LinkStatusMessage::clear_lsmtype() {
  lsmtype_ = 0;
  clear_has_lsmtype();
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType TmSdnMessage_LinkStatusMessage::lsmtype() const {
  return static_cast< ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType >(lsmtype_);
}
inline void TmSdnMessage_LinkStatusMessage::set_lsmtype(::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType value) {
  assert(::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType_IsValid(value));
  set_has_lsmtype();
  lsmtype_ = value;
}

// required string nodeID1 = 2;
inline bool TmSdnMessage_LinkStatusMessage::has_nodeid1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TmSdnMessage_LinkStatusMessage::set_has_nodeid1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TmSdnMessage_LinkStatusMessage::clear_has_nodeid1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TmSdnMessage_LinkStatusMessage::clear_nodeid1() {
  if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
    nodeid1_->clear();
  }
  clear_has_nodeid1();
}
inline const ::std::string& TmSdnMessage_LinkStatusMessage::nodeid1() const {
  return *nodeid1_;
}
inline void TmSdnMessage_LinkStatusMessage::set_nodeid1(const ::std::string& value) {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  nodeid1_->assign(value);
}
inline void TmSdnMessage_LinkStatusMessage::set_nodeid1(const char* value) {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  nodeid1_->assign(value);
}
inline void TmSdnMessage_LinkStatusMessage::set_nodeid1(const char* value, size_t size) {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  nodeid1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_LinkStatusMessage::mutable_nodeid1() {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  return nodeid1_;
}
inline ::std::string* TmSdnMessage_LinkStatusMessage::release_nodeid1() {
  clear_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeid1_;
    nodeid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_LinkStatusMessage::set_allocated_nodeid1(::std::string* nodeid1) {
  if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid1_;
  }
  if (nodeid1) {
    set_has_nodeid1();
    nodeid1_ = nodeid1;
  } else {
    clear_has_nodeid1();
    nodeid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nodeID2 = 3;
inline bool TmSdnMessage_LinkStatusMessage::has_nodeid2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TmSdnMessage_LinkStatusMessage::set_has_nodeid2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TmSdnMessage_LinkStatusMessage::clear_has_nodeid2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TmSdnMessage_LinkStatusMessage::clear_nodeid2() {
  if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
    nodeid2_->clear();
  }
  clear_has_nodeid2();
}
inline const ::std::string& TmSdnMessage_LinkStatusMessage::nodeid2() const {
  return *nodeid2_;
}
inline void TmSdnMessage_LinkStatusMessage::set_nodeid2(const ::std::string& value) {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  nodeid2_->assign(value);
}
inline void TmSdnMessage_LinkStatusMessage::set_nodeid2(const char* value) {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  nodeid2_->assign(value);
}
inline void TmSdnMessage_LinkStatusMessage::set_nodeid2(const char* value, size_t size) {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  nodeid2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_LinkStatusMessage::mutable_nodeid2() {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  return nodeid2_;
}
inline ::std::string* TmSdnMessage_LinkStatusMessage::release_nodeid2() {
  clear_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeid2_;
    nodeid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_LinkStatusMessage::set_allocated_nodeid2(::std::string* nodeid2) {
  if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid2_;
  }
  if (nodeid2) {
    set_has_nodeid2();
    nodeid2_ = nodeid2;
  } else {
    clear_has_nodeid2();
    nodeid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TmSdnMessage_TrafficMonitoringMessage

// required string nodeID1 = 1;
inline bool TmSdnMessage_TrafficMonitoringMessage::has_nodeid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_has_nodeid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_has_nodeid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_nodeid1() {
  if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
    nodeid1_->clear();
  }
  clear_has_nodeid1();
}
inline const ::std::string& TmSdnMessage_TrafficMonitoringMessage::nodeid1() const {
  return *nodeid1_;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_nodeid1(const ::std::string& value) {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  nodeid1_->assign(value);
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_nodeid1(const char* value) {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  nodeid1_->assign(value);
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_nodeid1(const char* value, size_t size) {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  nodeid1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_TrafficMonitoringMessage::mutable_nodeid1() {
  set_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    nodeid1_ = new ::std::string;
  }
  return nodeid1_;
}
inline ::std::string* TmSdnMessage_TrafficMonitoringMessage::release_nodeid1() {
  clear_has_nodeid1();
  if (nodeid1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeid1_;
    nodeid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_allocated_nodeid1(::std::string* nodeid1) {
  if (nodeid1_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid1_;
  }
  if (nodeid1) {
    set_has_nodeid1();
    nodeid1_ = nodeid1;
  } else {
    clear_has_nodeid1();
    nodeid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nodeID2 = 2;
inline bool TmSdnMessage_TrafficMonitoringMessage::has_nodeid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_has_nodeid2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_has_nodeid2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_nodeid2() {
  if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
    nodeid2_->clear();
  }
  clear_has_nodeid2();
}
inline const ::std::string& TmSdnMessage_TrafficMonitoringMessage::nodeid2() const {
  return *nodeid2_;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_nodeid2(const ::std::string& value) {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  nodeid2_->assign(value);
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_nodeid2(const char* value) {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  nodeid2_->assign(value);
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_nodeid2(const char* value, size_t size) {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  nodeid2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_TrafficMonitoringMessage::mutable_nodeid2() {
  set_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    nodeid2_ = new ::std::string;
  }
  return nodeid2_;
}
inline ::std::string* TmSdnMessage_TrafficMonitoringMessage::release_nodeid2() {
  clear_has_nodeid2();
  if (nodeid2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeid2_;
    nodeid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_allocated_nodeid2(::std::string* nodeid2) {
  if (nodeid2_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid2_;
  }
  if (nodeid2) {
    set_has_nodeid2();
    nodeid2_ = nodeid2;
  } else {
    clear_has_nodeid2();
    nodeid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 packetsReceived = 3;
inline bool TmSdnMessage_TrafficMonitoringMessage::has_packetsreceived() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_has_packetsreceived() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_has_packetsreceived() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_packetsreceived() {
  packetsreceived_ = GOOGLE_LONGLONG(0);
  clear_has_packetsreceived();
}
inline ::google::protobuf::int64 TmSdnMessage_TrafficMonitoringMessage::packetsreceived() const {
  return packetsreceived_;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_packetsreceived(::google::protobuf::int64 value) {
  set_has_packetsreceived();
  packetsreceived_ = value;
}

// required int64 packetsTransmitted = 4;
inline bool TmSdnMessage_TrafficMonitoringMessage::has_packetstransmitted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_has_packetstransmitted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_has_packetstransmitted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_packetstransmitted() {
  packetstransmitted_ = GOOGLE_LONGLONG(0);
  clear_has_packetstransmitted();
}
inline ::google::protobuf::int64 TmSdnMessage_TrafficMonitoringMessage::packetstransmitted() const {
  return packetstransmitted_;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_packetstransmitted(::google::protobuf::int64 value) {
  set_has_packetstransmitted();
  packetstransmitted_ = value;
}

// required int64 bytesReceived = 5;
inline bool TmSdnMessage_TrafficMonitoringMessage::has_bytesreceived() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_has_bytesreceived() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_has_bytesreceived() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_bytesreceived() {
  bytesreceived_ = GOOGLE_LONGLONG(0);
  clear_has_bytesreceived();
}
inline ::google::protobuf::int64 TmSdnMessage_TrafficMonitoringMessage::bytesreceived() const {
  return bytesreceived_;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_bytesreceived(::google::protobuf::int64 value) {
  set_has_bytesreceived();
  bytesreceived_ = value;
}

// required int64 bytesTransmitted = 6;
inline bool TmSdnMessage_TrafficMonitoringMessage::has_bytestransmitted() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_has_bytestransmitted() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_has_bytestransmitted() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TmSdnMessage_TrafficMonitoringMessage::clear_bytestransmitted() {
  bytestransmitted_ = GOOGLE_LONGLONG(0);
  clear_has_bytestransmitted();
}
inline ::google::protobuf::int64 TmSdnMessage_TrafficMonitoringMessage::bytestransmitted() const {
  return bytestransmitted_;
}
inline void TmSdnMessage_TrafficMonitoringMessage::set_bytestransmitted(::google::protobuf::int64 value) {
  set_has_bytestransmitted();
  bytestransmitted_ = value;
}

// -------------------------------------------------------------------

// TmSdnMessage_ResourceRequestMessage_RecourceRequest

// required string srcNode = 1;
inline bool TmSdnMessage_ResourceRequestMessage_RecourceRequest::has_srcnode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_has_srcnode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_has_srcnode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_srcnode() {
  if (srcnode_ != &::google::protobuf::internal::kEmptyString) {
    srcnode_->clear();
  }
  clear_has_srcnode();
}
inline const ::std::string& TmSdnMessage_ResourceRequestMessage_RecourceRequest::srcnode() const {
  return *srcnode_;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_srcnode(const ::std::string& value) {
  set_has_srcnode();
  if (srcnode_ == &::google::protobuf::internal::kEmptyString) {
    srcnode_ = new ::std::string;
  }
  srcnode_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_srcnode(const char* value) {
  set_has_srcnode();
  if (srcnode_ == &::google::protobuf::internal::kEmptyString) {
    srcnode_ = new ::std::string;
  }
  srcnode_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_srcnode(const char* value, size_t size) {
  set_has_srcnode();
  if (srcnode_ == &::google::protobuf::internal::kEmptyString) {
    srcnode_ = new ::std::string;
  }
  srcnode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::mutable_srcnode() {
  set_has_srcnode();
  if (srcnode_ == &::google::protobuf::internal::kEmptyString) {
    srcnode_ = new ::std::string;
  }
  return srcnode_;
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::release_srcnode() {
  clear_has_srcnode();
  if (srcnode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcnode_;
    srcnode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_allocated_srcnode(::std::string* srcnode) {
  if (srcnode_ != &::google::protobuf::internal::kEmptyString) {
    delete srcnode_;
  }
  if (srcnode) {
    set_has_srcnode();
    srcnode_ = srcnode;
  } else {
    clear_has_srcnode();
    srcnode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dstNode = 2;
inline bool TmSdnMessage_ResourceRequestMessage_RecourceRequest::has_dstnode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_has_dstnode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_has_dstnode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_dstnode() {
  if (dstnode_ != &::google::protobuf::internal::kEmptyString) {
    dstnode_->clear();
  }
  clear_has_dstnode();
}
inline const ::std::string& TmSdnMessage_ResourceRequestMessage_RecourceRequest::dstnode() const {
  return *dstnode_;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_dstnode(const ::std::string& value) {
  set_has_dstnode();
  if (dstnode_ == &::google::protobuf::internal::kEmptyString) {
    dstnode_ = new ::std::string;
  }
  dstnode_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_dstnode(const char* value) {
  set_has_dstnode();
  if (dstnode_ == &::google::protobuf::internal::kEmptyString) {
    dstnode_ = new ::std::string;
  }
  dstnode_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_dstnode(const char* value, size_t size) {
  set_has_dstnode();
  if (dstnode_ == &::google::protobuf::internal::kEmptyString) {
    dstnode_ = new ::std::string;
  }
  dstnode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::mutable_dstnode() {
  set_has_dstnode();
  if (dstnode_ == &::google::protobuf::internal::kEmptyString) {
    dstnode_ = new ::std::string;
  }
  return dstnode_;
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::release_dstnode() {
  clear_has_dstnode();
  if (dstnode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dstnode_;
    dstnode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_allocated_dstnode(::std::string* dstnode) {
  if (dstnode_ != &::google::protobuf::internal::kEmptyString) {
    delete dstnode_;
  }
  if (dstnode) {
    set_has_dstnode();
    dstnode_ = dstnode;
  } else {
    clear_has_dstnode();
    dstnode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string srcMac = 3;
inline bool TmSdnMessage_ResourceRequestMessage_RecourceRequest::has_srcmac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_has_srcmac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_has_srcmac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_srcmac() {
  if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
    srcmac_->clear();
  }
  clear_has_srcmac();
}
inline const ::std::string& TmSdnMessage_ResourceRequestMessage_RecourceRequest::srcmac() const {
  return *srcmac_;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_srcmac(const ::std::string& value) {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  srcmac_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_srcmac(const char* value) {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  srcmac_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_srcmac(const char* value, size_t size) {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  srcmac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::mutable_srcmac() {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  return srcmac_;
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::release_srcmac() {
  clear_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcmac_;
    srcmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_allocated_srcmac(::std::string* srcmac) {
  if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
    delete srcmac_;
  }
  if (srcmac) {
    set_has_srcmac();
    srcmac_ = srcmac;
  } else {
    clear_has_srcmac();
    srcmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nodeConnector = 4;
inline bool TmSdnMessage_ResourceRequestMessage_RecourceRequest::has_nodeconnector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_has_nodeconnector() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_has_nodeconnector() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::clear_nodeconnector() {
  if (nodeconnector_ != &::google::protobuf::internal::kEmptyString) {
    nodeconnector_->clear();
  }
  clear_has_nodeconnector();
}
inline const ::std::string& TmSdnMessage_ResourceRequestMessage_RecourceRequest::nodeconnector() const {
  return *nodeconnector_;
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_nodeconnector(const ::std::string& value) {
  set_has_nodeconnector();
  if (nodeconnector_ == &::google::protobuf::internal::kEmptyString) {
    nodeconnector_ = new ::std::string;
  }
  nodeconnector_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_nodeconnector(const char* value) {
  set_has_nodeconnector();
  if (nodeconnector_ == &::google::protobuf::internal::kEmptyString) {
    nodeconnector_ = new ::std::string;
  }
  nodeconnector_->assign(value);
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_nodeconnector(const char* value, size_t size) {
  set_has_nodeconnector();
  if (nodeconnector_ == &::google::protobuf::internal::kEmptyString) {
    nodeconnector_ = new ::std::string;
  }
  nodeconnector_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::mutable_nodeconnector() {
  set_has_nodeconnector();
  if (nodeconnector_ == &::google::protobuf::internal::kEmptyString) {
    nodeconnector_ = new ::std::string;
  }
  return nodeconnector_;
}
inline ::std::string* TmSdnMessage_ResourceRequestMessage_RecourceRequest::release_nodeconnector() {
  clear_has_nodeconnector();
  if (nodeconnector_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeconnector_;
    nodeconnector_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceRequestMessage_RecourceRequest::set_allocated_nodeconnector(::std::string* nodeconnector) {
  if (nodeconnector_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeconnector_;
  }
  if (nodeconnector) {
    set_has_nodeconnector();
    nodeconnector_ = nodeconnector;
  } else {
    clear_has_nodeconnector();
    nodeconnector_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TmSdnMessage_ResourceRequestMessage

// repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage.RecourceRequest requests = 1;
inline int TmSdnMessage_ResourceRequestMessage::requests_size() const {
  return requests_.size();
}
inline void TmSdnMessage_ResourceRequestMessage::clear_requests() {
  requests_.Clear();
}
inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest& TmSdnMessage_ResourceRequestMessage::requests(int index) const {
  return requests_.Get(index);
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest* TmSdnMessage_ResourceRequestMessage::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest* TmSdnMessage_ResourceRequestMessage::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest >&
TmSdnMessage_ResourceRequestMessage::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage_RecourceRequest >*
TmSdnMessage_ResourceRequestMessage::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// TmSdnMessage_ResourceOfferMessage_RecourceOffer

// required string nid = 1;
inline bool TmSdnMessage_ResourceOfferMessage_RecourceOffer::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_nid() {
  if (nid_ != &::google::protobuf::internal::kEmptyString) {
    nid_->clear();
  }
  clear_has_nid();
}
inline const ::std::string& TmSdnMessage_ResourceOfferMessage_RecourceOffer::nid() const {
  return *nid_;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_nid(const ::std::string& value) {
  set_has_nid();
  if (nid_ == &::google::protobuf::internal::kEmptyString) {
    nid_ = new ::std::string;
  }
  nid_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_nid(const char* value) {
  set_has_nid();
  if (nid_ == &::google::protobuf::internal::kEmptyString) {
    nid_ = new ::std::string;
  }
  nid_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_nid(const char* value, size_t size) {
  set_has_nid();
  if (nid_ == &::google::protobuf::internal::kEmptyString) {
    nid_ = new ::std::string;
  }
  nid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::mutable_nid() {
  set_has_nid();
  if (nid_ == &::google::protobuf::internal::kEmptyString) {
    nid_ = new ::std::string;
  }
  return nid_;
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::release_nid() {
  clear_has_nid();
  if (nid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nid_;
    nid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_allocated_nid(::std::string* nid) {
  if (nid_ != &::google::protobuf::internal::kEmptyString) {
    delete nid_;
  }
  if (nid) {
    set_has_nid();
    nid_ = nid;
  } else {
    clear_has_nid();
    nid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string lid = 2;
inline bool TmSdnMessage_ResourceOfferMessage_RecourceOffer::has_lid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_has_lid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_has_lid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_lid() {
  if (lid_ != &::google::protobuf::internal::kEmptyString) {
    lid_->clear();
  }
  clear_has_lid();
}
inline const ::std::string& TmSdnMessage_ResourceOfferMessage_RecourceOffer::lid() const {
  return *lid_;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_lid(const ::std::string& value) {
  set_has_lid();
  if (lid_ == &::google::protobuf::internal::kEmptyString) {
    lid_ = new ::std::string;
  }
  lid_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_lid(const char* value) {
  set_has_lid();
  if (lid_ == &::google::protobuf::internal::kEmptyString) {
    lid_ = new ::std::string;
  }
  lid_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_lid(const char* value, size_t size) {
  set_has_lid();
  if (lid_ == &::google::protobuf::internal::kEmptyString) {
    lid_ = new ::std::string;
  }
  lid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::mutable_lid() {
  set_has_lid();
  if (lid_ == &::google::protobuf::internal::kEmptyString) {
    lid_ = new ::std::string;
  }
  return lid_;
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::release_lid() {
  clear_has_lid();
  if (lid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lid_;
    lid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_allocated_lid(::std::string* lid) {
  if (lid_ != &::google::protobuf::internal::kEmptyString) {
    delete lid_;
  }
  if (lid) {
    set_has_lid();
    lid_ = lid;
  } else {
    clear_has_lid();
    lid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ilid = 3;
inline bool TmSdnMessage_ResourceOfferMessage_RecourceOffer::has_ilid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_has_ilid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_has_ilid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_ilid() {
  if (ilid_ != &::google::protobuf::internal::kEmptyString) {
    ilid_->clear();
  }
  clear_has_ilid();
}
inline const ::std::string& TmSdnMessage_ResourceOfferMessage_RecourceOffer::ilid() const {
  return *ilid_;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_ilid(const ::std::string& value) {
  set_has_ilid();
  if (ilid_ == &::google::protobuf::internal::kEmptyString) {
    ilid_ = new ::std::string;
  }
  ilid_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_ilid(const char* value) {
  set_has_ilid();
  if (ilid_ == &::google::protobuf::internal::kEmptyString) {
    ilid_ = new ::std::string;
  }
  ilid_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_ilid(const char* value, size_t size) {
  set_has_ilid();
  if (ilid_ == &::google::protobuf::internal::kEmptyString) {
    ilid_ = new ::std::string;
  }
  ilid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::mutable_ilid() {
  set_has_ilid();
  if (ilid_ == &::google::protobuf::internal::kEmptyString) {
    ilid_ = new ::std::string;
  }
  return ilid_;
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::release_ilid() {
  clear_has_ilid();
  if (ilid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ilid_;
    ilid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_allocated_ilid(::std::string* ilid) {
  if (ilid_ != &::google::protobuf::internal::kEmptyString) {
    delete ilid_;
  }
  if (ilid) {
    set_has_ilid();
    ilid_ = ilid;
  } else {
    clear_has_ilid();
    ilid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string srcMac = 4;
inline bool TmSdnMessage_ResourceOfferMessage_RecourceOffer::has_srcmac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_has_srcmac() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_has_srcmac() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::clear_srcmac() {
  if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
    srcmac_->clear();
  }
  clear_has_srcmac();
}
inline const ::std::string& TmSdnMessage_ResourceOfferMessage_RecourceOffer::srcmac() const {
  return *srcmac_;
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_srcmac(const ::std::string& value) {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  srcmac_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_srcmac(const char* value) {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  srcmac_->assign(value);
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_srcmac(const char* value, size_t size) {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  srcmac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::mutable_srcmac() {
  set_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    srcmac_ = new ::std::string;
  }
  return srcmac_;
}
inline ::std::string* TmSdnMessage_ResourceOfferMessage_RecourceOffer::release_srcmac() {
  clear_has_srcmac();
  if (srcmac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcmac_;
    srcmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TmSdnMessage_ResourceOfferMessage_RecourceOffer::set_allocated_srcmac(::std::string* srcmac) {
  if (srcmac_ != &::google::protobuf::internal::kEmptyString) {
    delete srcmac_;
  }
  if (srcmac) {
    set_has_srcmac();
    srcmac_ = srcmac;
  } else {
    clear_has_srcmac();
    srcmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TmSdnMessage_ResourceOfferMessage

// repeated .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage.RecourceOffer offers = 1;
inline int TmSdnMessage_ResourceOfferMessage::offers_size() const {
  return offers_.size();
}
inline void TmSdnMessage_ResourceOfferMessage::clear_offers() {
  offers_.Clear();
}
inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer& TmSdnMessage_ResourceOfferMessage::offers(int index) const {
  return offers_.Get(index);
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer* TmSdnMessage_ResourceOfferMessage::mutable_offers(int index) {
  return offers_.Mutable(index);
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer* TmSdnMessage_ResourceOfferMessage::add_offers() {
  return offers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer >&
TmSdnMessage_ResourceOfferMessage::offers() const {
  return offers_;
}
inline ::google::protobuf::RepeatedPtrField< ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage_RecourceOffer >*
TmSdnMessage_ResourceOfferMessage::mutable_offers() {
  return &offers_;
}

// -------------------------------------------------------------------

// TmSdnMessage

// optional .eu.point.tmsdn.impl.TmSdnMessage.LinkStatusMessage linkStatusMessage = 1;
inline bool TmSdnMessage::has_linkstatusmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TmSdnMessage::set_has_linkstatusmessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TmSdnMessage::clear_has_linkstatusmessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TmSdnMessage::clear_linkstatusmessage() {
  if (linkstatusmessage_ != NULL) linkstatusmessage_->::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage::Clear();
  clear_has_linkstatusmessage();
}
inline const ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage& TmSdnMessage::linkstatusmessage() const {
  return linkstatusmessage_ != NULL ? *linkstatusmessage_ : *default_instance_->linkstatusmessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* TmSdnMessage::mutable_linkstatusmessage() {
  set_has_linkstatusmessage();
  if (linkstatusmessage_ == NULL) linkstatusmessage_ = new ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage;
  return linkstatusmessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* TmSdnMessage::release_linkstatusmessage() {
  clear_has_linkstatusmessage();
  ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* temp = linkstatusmessage_;
  linkstatusmessage_ = NULL;
  return temp;
}
inline void TmSdnMessage::set_allocated_linkstatusmessage(::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage* linkstatusmessage) {
  delete linkstatusmessage_;
  linkstatusmessage_ = linkstatusmessage;
  if (linkstatusmessage) {
    set_has_linkstatusmessage();
  } else {
    clear_has_linkstatusmessage();
  }
}

// optional .eu.point.tmsdn.impl.TmSdnMessage.TrafficMonitoringMessage trafficMonitoringMessage = 2;
inline bool TmSdnMessage::has_trafficmonitoringmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TmSdnMessage::set_has_trafficmonitoringmessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TmSdnMessage::clear_has_trafficmonitoringmessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TmSdnMessage::clear_trafficmonitoringmessage() {
  if (trafficmonitoringmessage_ != NULL) trafficmonitoringmessage_->::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage::Clear();
  clear_has_trafficmonitoringmessage();
}
inline const ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage& TmSdnMessage::trafficmonitoringmessage() const {
  return trafficmonitoringmessage_ != NULL ? *trafficmonitoringmessage_ : *default_instance_->trafficmonitoringmessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* TmSdnMessage::mutable_trafficmonitoringmessage() {
  set_has_trafficmonitoringmessage();
  if (trafficmonitoringmessage_ == NULL) trafficmonitoringmessage_ = new ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage;
  return trafficmonitoringmessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* TmSdnMessage::release_trafficmonitoringmessage() {
  clear_has_trafficmonitoringmessage();
  ::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* temp = trafficmonitoringmessage_;
  trafficmonitoringmessage_ = NULL;
  return temp;
}
inline void TmSdnMessage::set_allocated_trafficmonitoringmessage(::eu::point::tmsdn::impl::TmSdnMessage_TrafficMonitoringMessage* trafficmonitoringmessage) {
  delete trafficmonitoringmessage_;
  trafficmonitoringmessage_ = trafficmonitoringmessage;
  if (trafficmonitoringmessage) {
    set_has_trafficmonitoringmessage();
  } else {
    clear_has_trafficmonitoringmessage();
  }
}

// optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceRequestMessage resourceRequestMessage = 3;
inline bool TmSdnMessage::has_resourcerequestmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TmSdnMessage::set_has_resourcerequestmessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TmSdnMessage::clear_has_resourcerequestmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TmSdnMessage::clear_resourcerequestmessage() {
  if (resourcerequestmessage_ != NULL) resourcerequestmessage_->::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage::Clear();
  clear_has_resourcerequestmessage();
}
inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage& TmSdnMessage::resourcerequestmessage() const {
  return resourcerequestmessage_ != NULL ? *resourcerequestmessage_ : *default_instance_->resourcerequestmessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* TmSdnMessage::mutable_resourcerequestmessage() {
  set_has_resourcerequestmessage();
  if (resourcerequestmessage_ == NULL) resourcerequestmessage_ = new ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage;
  return resourcerequestmessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* TmSdnMessage::release_resourcerequestmessage() {
  clear_has_resourcerequestmessage();
  ::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* temp = resourcerequestmessage_;
  resourcerequestmessage_ = NULL;
  return temp;
}
inline void TmSdnMessage::set_allocated_resourcerequestmessage(::eu::point::tmsdn::impl::TmSdnMessage_ResourceRequestMessage* resourcerequestmessage) {
  delete resourcerequestmessage_;
  resourcerequestmessage_ = resourcerequestmessage;
  if (resourcerequestmessage) {
    set_has_resourcerequestmessage();
  } else {
    clear_has_resourcerequestmessage();
  }
}

// optional .eu.point.tmsdn.impl.TmSdnMessage.ResourceOfferMessage resourceOfferMessage = 4;
inline bool TmSdnMessage::has_resourceoffermessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TmSdnMessage::set_has_resourceoffermessage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TmSdnMessage::clear_has_resourceoffermessage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TmSdnMessage::clear_resourceoffermessage() {
  if (resourceoffermessage_ != NULL) resourceoffermessage_->::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage::Clear();
  clear_has_resourceoffermessage();
}
inline const ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage& TmSdnMessage::resourceoffermessage() const {
  return resourceoffermessage_ != NULL ? *resourceoffermessage_ : *default_instance_->resourceoffermessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* TmSdnMessage::mutable_resourceoffermessage() {
  set_has_resourceoffermessage();
  if (resourceoffermessage_ == NULL) resourceoffermessage_ = new ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage;
  return resourceoffermessage_;
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* TmSdnMessage::release_resourceoffermessage() {
  clear_has_resourceoffermessage();
  ::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* temp = resourceoffermessage_;
  resourceoffermessage_ = NULL;
  return temp;
}
inline void TmSdnMessage::set_allocated_resourceoffermessage(::eu::point::tmsdn::impl::TmSdnMessage_ResourceOfferMessage* resourceoffermessage) {
  delete resourceoffermessage_;
  resourceoffermessage_ = resourceoffermessage;
  if (resourceoffermessage) {
    set_has_resourceoffermessage();
  } else {
    clear_has_resourceoffermessage();
  }
}

// required .eu.point.tmsdn.impl.TmSdnMessage.TmSdnMessageType type = 5;
inline bool TmSdnMessage::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TmSdnMessage::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TmSdnMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TmSdnMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType TmSdnMessage::type() const {
  return static_cast< ::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType >(type_);
}
inline void TmSdnMessage::set_type(::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType value) {
  assert(::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace impl
}  // namespace tmsdn
}  // namespace point
}  // namespace eu

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType>() {
  return ::eu::point::tmsdn::impl::TmSdnMessage_LinkStatusMessage_LSMType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType>() {
  return ::eu::point::tmsdn::impl::TmSdnMessage_TmSdnMessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
